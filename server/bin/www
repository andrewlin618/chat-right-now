#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

const { app, sessionStore } = require("../app");
const http = require("http");
const cookie = require("cookie");
const jwt = require("jsonwebtoken");
const db = require("../db");
const { User } = require("../db/models");

//Store user sockets in hashmap;
const onlineUsersMap = require("../onlineUsers");
const leavingCallbacksMap = new Map();

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */

const io = require("socket.io")(server);

io.on("connection", (socket) => {
  console.log("=====================")
  console.log("=  Socket Connected =")
  console.log("=====================")
  const authenticateUser = () => {
    const cookies = cookie.parse(`${socket.handshake.headers.cookie}`);
    const token = cookies.token;
    if (token) {
      jwt.verify(token, process.env.SESSION_SECRET, (err, decoded) => {
        if (err) {
          console.log(err);
        }
        User.findOne({
          where: { id: decoded.id },
        }).then((user) => {
          socket.user = user;
        });
      });
    }
  };

  const addSocketToMap = () => {
    const id = socket.user.id;
    if (!onlineUsersMap.has(id)) {
      onlineUsersMap.set(id, [socket.id]);
      // send the user who just went online to everyone else who is already online
    } else {
      onlineUsersMap.get(id).push(socket.id);
    }
  };

  const deleteSocketFromMap = () => {
    const id = socket.user.id;
    const socketIds = onlineUsersMap.get(id);
    if (!socketIds) return onlineUsersMap.set(id, []);
    if (socketIds.length >= 1) {
      socketIndex = socketIds.indexOf(socket.id);
      socketIds.splice(socketIndex, 1);
    }
  };

  authenticateUser();

  socket.on("go-online", () => {
    if (!socket.user) return;

    //Handle reconnect user:
    const id = socket.user.id;
    if ((leaving = leavingCallbacksMap.get(id))) {
      clearTimeout(leaving);
      leavingCallbacksMap.delete(id);
      const socketIds = onlineUsersMap.get(id);
      if (socketIds) socketIds.push(socket.id);
      else onlineUsersMap.set(id, [socket.id]);
    } else {
      //Normal Login:
      if (onlineUsersMap.has(id)) {
        addSocketToMap();
      } else {
        addSocketToMap();
        socket.broadcast.emit("add-online-user", id);
      }
    }
    console.log(onlineUsersMap);
  });

  socket.on("new-message", (data) => {
    if (!socket.user) return;
    const socketIds = onlineUsersMap.get(data.recipientId) || [];
    for (const socketId of socketIds) {
      io.to(socketId).emit("new-message", {
        message: data.message,
        sender: data.sender,
      });
    }
  });

  socket.on("logout", () => {
    if (!socket.user) return;
    const id = socket.user.id;
    deleteSocketFromMap();
    if (!onlineUsersMap.get(id) || onlineUsersMap.get(id).length === 0) {
      socket.broadcast.emit("remove-offline-user", id);
      onlineUsersMap.delete(id);
    }
  });

  socket.on("disconnect", () => {
    if (!socket.user) return;
    const id = socket.user.id;
    deleteSocketFromMap();
    leavingCallbacksMap.set(
      id,
      setTimeout(() => {
        if (!onlineUsersMap.get(id) || onlineUsersMap.get(id).length === 0) {
          socket.broadcast.emit("remove-offline-user", id);
          onlineUsersMap.delete(id);
          console.log("a session disconnected.");
        }
      }, 3000)
    );
  });
});

sessionStore
  .sync()
  .then(() => db.sync())
  .then(() => {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
